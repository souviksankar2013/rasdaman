#!/bin/bash
#
# rasdaman     Startup script for the Rasdaman Server
#
# chkconfig: - 64 36
# description: Starts and stops the rasdaman server, and allows to initialize the database.
# processname: rasdaman
# config: /etc/rasdaman/rasmgr.conf
# config: /etc/sysconfig/rasdaman
# pidfile: /var/run/rasdaman.pid
#
### BEGIN INIT INFO
# Provides: rasdaman
# Required-Start: $postgresql
# Required-Stop:
# Should-Start: distcache
# Short-Description: Starts and stops the rasdaman server, and allows to initialize the database.
# Description: The rasdaman server is a raster data manager.
### END INIT INFO

# Version from spec
RASVERSION=@RASVERSION@
# RASMAJORVERSION is major version, e.g., 8.0 (this should match RAS_VERSION)
RASMAJORVERSION=`echo "$RASVERSION" | sed 's/^\([0-9]*\.[0-9]*\).*$/\1/'`

# Names for messages
prog=rasdaman

# Source function library
if [ -f /etc/rc.d/init.d/functions ]; then
	. /etc/rc.d/init.d/functions
elif [ -f /lib/lsb/init-functions ]; then
	. /lib/lsb/init-functions
fi
# Source variables for rasdaman
if [ -f /etc/sysconfig/rasdaman ]; then
        . /etc/sysconfig/rasdaman
fi

# Reset empty to defaults
rasmgr=${RASMGR-/usr/bin/rasmgr}
rasserver=${RASMGR-/usr/bin/rasserver}
rasctrl=${RASCONTROL-/usr/bin/rascontrol}
pidfile=${PIDFILE-/var/run/rasdaman.pid}
lockfile=${LOCKFILE-/var/lock/subsys/rasdaman}
wait_for_children=${WAIT_FOR_CHILDREN-5}
servers=${RASSERVERS-"-all"}
raslogin=${RASADMIN-rasadmin:d293a15562d3e70b6fdc5ee452eaed40}
rasdir=${RASDIR-/var/lib/rasdaman}
raslogdir=${RASLOGDIR-/var/log/rasdaman}
rasdatadir=${RASDATA-/var/lib/rasdaman/data}
rasshell=${RASSHELL-/bin/bash}
petapath=${PETASCOPE_PATH-/usr/share/rasdaman/petascope}

# To check if postgres cluster was initialized
# we need this and we fetch it from our sysconfig not postgres one
PGDATA=${PGDATA-/var/lib/pgsql/data}

RETVAL=0

# For SELinux we need to use 'runuser' not 'su'
if [ -x /sbin/runuser ]
then
    SU=runuser
else
    SU=su
fi

raslog=$rasdir/startup.log
rascontrol="RASLOGIN=$raslogin $rasctrl"
deffile=$rasdir/basictypes.dl

filedatadir=$rasdir/data
$SU -l rasdaman -s "$rasshell" -c "mkdir -p $filedatadir"

# check if the rasdaman system user exists
check_rasdaman_user()
{
  getent passwd rasdaman > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo $"rasdaman user not found, please reinstall rasdaman."
    exit $!
  fi
}

create_rasdaman_role()
{
  $SU -l postgres -c "psql postgres -tAc \"SELECT 1 FROM pg_roles WHERE rolname='rasdaman'\" | grep -q 1 || createuser -s rasdaman"
  RETVAL=$?
  if [[ $RETVAL != 0 ]]
  then
    echo $"creating rasdaman user in postgres failed."
    exit $!
  fi
}

create_petascope_role()
{
  $SU -l postgres -c "psql postgres -tAc \"SELECT 1 FROM pg_roles WHERE rolname='petauser'\" | grep -q 1"
  RETVAL=$?
  if [[ $RETVAL != 0 ]]
  then
    $SU -l postgres -c "createuser -s petauser"
    RETVAL=$?
    if [[ $RETVAL != 0 ]]
    then
      echo $"creating petascope user in postgres failed."
      exit $!
    fi
    $SU -l postgres -c "psql -c \"alter user petauser with password 'petapasswd'\""
    RETVAL=$?
    if [[ $RETVAL != 0 ]]
    then
      echo $"updating petascope user password in postgres failed."
      exit $!
    fi
  fi
}

# The semantics of these two functions differ from the way apachectl does
# things -- attempting to start while running is a failure, and shutdown
# when not running is also a failure.  So we just do it the way init scripts
# are expected to behave here.
start() {
  check_rasdaman_user

  chown -R rasdaman:rasdaman "$raslogdir"
  # Make sure startup-time log file is valid
  if [ ! -e "$raslog" -a ! -h "$raslog" ]
  then
    touch "$raslog" || exit 1
    chown rasdaman:rasdaman "$raslog"
    chmod go-rwx "$raslog"
    [ -x /usr/bin/chcon ] && /usr/bin/chcon -u system_u -r object_r -t postgresql_log_t "$raslog" 2>/dev/null
  fi

  echo $"Starting $prog..."
  echo -n $"Starting $rasmgr: "
  $SU -l rasdaman -s "$rasshell" -c "$rasmgr &" >> "$raslog" 2>&1 < /dev/null
  RETVAL=$?
  if [[ $RETVAL = 0 ]]
  then
    echo ok.
    touch ${lockfile}
    pidof -s "$rasmgr" > ${pidfile}
  else
    echo $"failed starting rasmgr, please see $raslog for more details"
    exit $!
  fi

  sleep $wait_for_children

  for SRV in $servers
  do
    echo -n $"$rasctrl: starting server $SRV... "
    $SU -l rasdaman -s "$rasshell" -c "$rascontrol -e -q -x up srv $SRV" >> "$raslog" 2>&1 < /dev/null
    RETVAL=$?
    if [[ $RETVAL != 0 ]]
    then
      echo $"failed starting a rasserver, please see $raslog for more details"
      exit $!
    else
      echo $"ok."
    fi
  done

  $SU -l rasdaman -s "$rasshell" -c "rasql -q 'select c from RAS_COLLECTIONNAMES AS c' --out string" > /dev/null 2>&1
  RETVAL=$?
  if [[ $RETVAL != 0 ]]
  then
    echo $"failed starting rasdaman, simple query check failed."
    exit $!
  fi

  return $RETVAL
}

# When stopping httpd a delay of >10 second is required before SIGKILLing the
# httpd parent; this gives enough time for the httpd parent to SIGKILL any
# errant children.
stop() {
  check_rasdaman_user

  running=`$SU -l rasdaman -s "$rasshell" -c "$rascontrol -e -q -x list srv | awk '{ if (\\$6 == \"UP\") print \\$2;}'"`
  for SRV in $running
  do
    echo -n $"$rasctrl: stoping server $SRV... "
    $SU -l rasdaman -s "$rasshell" -c "$rascontrol -e -q -x down srv $SRV -kill" >> "$raslog" 2>&1 < /dev/null
    RETVAL=$?
    if [[ $RETVAL != 0 ]]
    then
      echo $"failed, see $raslog for details."
    else
      echo $"ok."
    fi
  done

  sleep $wait_for_children

  echo -n $"$rasctrl: stoping rasmgr... "
  $SU -l rasdaman -s "$rasshell" -c "$rascontrol -e -q -x down host -all" >> "$raslog" 2>&1 < /dev/null
  RETVAL=$?
  if [[ $RETVAL != 0 ]]
  then
    echo $"failed, see $raslog for details."
  else
    echo $"ok."
  fi

  [ $RETVAL = 0 ] && rm -f ${lockfile} ${pidfile}
}

#
# Initializes RASBASE
#
initdb(){
  bhostname=$(hostname)
  cp /etc/rasdaman/rasmgr.conf /etc/rasdaman/rasmgr.conf.init
  cat /etc/rasdaman/rasmgr.conf.init | sed -e "s/ -host [^ ]*/ -host $bhostname/g" > /etc/rasdaman/rasmgr.conf

  # create rasdaman user in postgres
  create_rasdaman_role

  # insert type definitions
  mkdir -p $rasdatadir
  $SU -l rasdaman -s "$rasshell" -c "$rasserver -c"
  RETVAL=$?
  if [[ $RETVAL != 0 ]]
  then
    echo $"initializing database schema in rasdaman failed."
    exit $!
  fi
}

#
# Update RASBASE
#
updatedb()
{
  check_rasdaman_user

  $SU -l rasdaman -s "$rasshell" -c "update_db.sh"
}

#
# Initializes/updates the petascope database
#
initpetascopedb(){
  check_rasdaman_user

  # update petascope user in configuration, unless the user has changed it
  grep 'metadata_user=inituser' /etc/rasdaman/petascope.properties > /dev/null
  if [ $? -eq 0 ]; then
    sed -i 's/^metadata_user=.\+/metadata_user=petauser/' /etc/rasdaman/petascope.properties
    sed -i 's/^metadata_pass=.\+/metadata_pass=petapasswd/' /etc/rasdaman/petascope.properties

    # setup postgres to allow connections from petascope
    grep trust $PGDATA/pg_hba.conf | grep -v METHOD > /dev/null
    if [ $? -ne 0 ]; then
      echo $"adding trust authentication to $PGDATA/pg_hba.conf"
      cp $PGDATA/pg_hba.conf $PGDATA/pg_hba.conf.bak
cat << EOF > $PGDATA/pg_hba.conf
# TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD

# "local" is for Unix domain socket connections only
#------------------------------------------------------------
local   all         all                               trust
# IPv4 local connections:
host    all         all         127.0.0.1/32          trust
# IPv6 local connections:
host    all         all         ::1/128               trust
#------------------------------------------------------------
EOF

      sed '1,/# TYPE/d' $PGDATA/pg_hba.conf.bak >> $PGDATA/pg_hba.conf
      service postgresql restart > /dev/null 2>&1
    fi
  fi

  # create petascope user in postgres if it isn't already created
  create_petascope_role

  $SU -l rasdaman -s "$rasshell" -c "update_petascopedb.sh"
}

#
# Drop RASBASE
#
dropdb(){
  check_rasdaman_user

  echo dropping RASBASE...
  rm -rf $rasdatadir/*
  echo dropping user...
  $SU -l postgres -s "$rasshell" -c "dropuser rasdaman"
  RETVAL=$?
  if [[ $RETVAL != 0 ]]
  then
    echo $"drop user failed"
  fi
}

#
# Drop the petascope database
#
droppetascopedb(){
  check_rasdaman_user

  echo dropping petascopedb...
  $SU -l postgres -s "$rasshell" -c "dropdb petascopedb"
  RETVAL=$?
  if [[ $RETVAL != 0 ]]
  then
    echo $"droppetascopedb failed"
  fi
}

# See how we were called.
case "$1" in
  start)
  start
  ;;
  stop)
  stop
  ;;
  status)
  status -p ${pidfile} $rasmgr
  $SU -l rasdaman -s "$rasshell" -c "$rascontrol -e -q -x list srv"
  RETVAL=$?
  ;;
  restart)
  stop
  start
  ;;
  condrestart)
  if status -p ${pidfile} $rasmgr >&/dev/null; then
    stop
    start
  fi
  ;;
  initdb)
  initdb
  ;;
  updatedb)
  updatedb
  ;;
  initpetascopedb)
  initpetascopedb
  ;;
  updatepetascopedb)
  initpetascopedb
  ;;
  dropdb)
  dropdb
  ;;
  droppetascopedb)
  droppetascopedb
  ;;
  *)
  echo $"Usage: $prog {start|stop|restart|condrestart|status|"
  echo $"                 initdb|updatedb|dropdb|"
  echo $"                 initpetascopedb|updatepetascopedb|droppetascopedb}"
  RETVAL=3
esac

exit $RETVAL
