#!/bin/sh
#
# This file is part of rasdaman community.
#
# Rasdaman community is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Rasdaman community is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2003 - 2017 Peter Baumann /
# rasdaman GmbH.
#
# For more information please see <http://www.rasdaman.org>
# or contact Peter Baumann via <baumann@rasdaman.com>.      
#

#
# start_rasdaman.sh - start rasdaman server complex
#
# SYNTAX
#    start_rasdaman.sh [servers...]
#
# DESCRIPTION
#    This script starts rasdaman.
#    Which rasdaman servers are started depends on the 'server' name(s) provided:
#    * If no server name is provided then the environment variable $RASSERVERS is
#      inspected to obtain a list of servers to be started. If $RASSERVERS is not
#      set, then all rasdaman servers defined will be attempted to start.
#    * If at least one parameter is provided then all parameters
#      will be treated as a server name which is tried to be started.
#
#    To log in to the server, the external variable $RASLOGIN is expected to hold
#    an ID string (see rasdaman manual). If not found, a desperate last attempt is
#    made to login as rasadmin/rasadmin. If this fails, no servers are started at all.
#
# PRECONDITIONS
#    - need to have a rasdaman admin login either from $RASLOGIN or as rasadmin/rasadmin
#    - need to run with an effective user id that allows to write into log/
#    - need to have a valid rasdaman installation
#

# --- CONSTANTS -----------------------------------------------------

PROG=$(basename $0)

RC_OK=0       # everything went fine
RC_ERROR=1    # something went wrong
RC_HELP=2

RASMGR_PORT=7001

# binaries
rasmgr_bin="@bindir@rasmgr"
rasserver_bin="@bindir@rasserver"
rascontrol_bin="@bindir@rascontrol"

petascope_props="@sysconfdir@petascope.properties"
secore_props="@sysconfdir@secore.properties"

log_path="@logdir@"
war_path="@pkgdatadir@war"

# base DBMS used by petascope
PETASCOPEDB=@petascopedb@
ENABLE_JAVA=@ENABLE_JAVA@

# rasadmin/rasadmin
DEFAULT_RASCONTROL_LOGIN=rasadmin:d293a15562d3e70b6fdc5ee452eaed40
[ -z "$RASLOGIN" ] && export RASLOGIN=$DEFAULT_RASCONTROL_LOGIN

log()  { echo "$PROG: $@"; }
logn() { echo -n "$PROG: $@"; }
error(){ echo "$PROG: $@" >&2; exit $RC_ERROR; }
check(){ [ $? ] && echo "ok." || echo "failed."; }

sleep --help 2>&1 | grep -q GNU && GNU_SLEEP=true
get_sleep_value() { [ $GNU_SLEEP ] && echo "$1" || echo "$2"; }

# Check if the last executed command is successfull
# $1 - process name
# $2 = 1 - exit with error if failed to start
# return - pid if started successfully
check_process()
{
    # get exit code and pid of the last executed command
    local exit_code=$?
    local pid=$!
    # wait 1 second for the process to establish
    sleep 1

    if [ $exit_code -ne 0 ]; then
        echo "failed; please check the logs for more information."
        [ "$2" = "1" ] && exit $RC_ERROR
    elif ! ps -Ao pid | grep "$pid\b" > /dev/null 2>&1; then
        echo "failed, pid $pid not found; please check the logs in $log_path for more information."
        [ "$2" = "1" ] && exit $RC_ERROR
    else
        echo "ok, pid $pid."
    fi
}

# Read the property of a value by input key from input properties file
get_property_value()
{
    # $1 is path to input properties file (e.g: /opt/rasdaman/etc/petascope.properties).
    # $2 is the key of a property in this file which needs to get the value of this key.
    local properties_file="$1"
    local key="$2"
    # only grep key=value line not commented line (e.g: #key=value)
    grep "^$key=" "$properties_file" | sed -e 's/.*=//' -e 's/^[ \t]*//'
}

# Return non-zero if port is available
# $1: the port to check
check_port_available()
{
    local port="$1"
    if type fuser > /dev/null 2>&1; then
        fuser -s -n tcp "$port" > /dev/null 2>&1
    elif type lsof > /dev/null 2>&1; then
        lsof -i ":$port" > /dev/null 2>&1
    elif type netstat > /dev/null 2>&1; then
        netstat -lntu | grep "LISTEN" | awk '{ print $4 }' | grep -q ":$port\$"
    elif type ss > /dev/null 2>&1; then
        ss -lntu | grep "LISTEN" | awk '{ print $5 }' | grep -q ":$port\$"
    else
        return 1 # assume it's available
    fi
}

set_rasmgr_port()
{
    case "$1" in
      ''|*[!0-9]*)  error "Invalid port specified: $1; expected a positive number <= 65535.";;
      *)            RASMGR_PORT="$1";;
    esac
    [ $RASMGR_PORT -gt 0 -a $RASMGR_PORT -lt 65535 ] || \
        error "Invalid port specified: $1; expected a positive number <= 65535."
}

#------ start embedded petascope/secore if needed --------------------------

# Start embedded tomcat from values in properties file
# $1: the path to properties file (e.g: /opt/rasdaman/etc/petascope.properties).
# $2: the web application name (e.g: petascope, secore).
# $3: the war file of application (e.g: rasdaman.war, def.war).
start_embedded()
{
    local props_path="$1"
    local app_name="$2"
    local war_file_name="$3"

    if [ -f "$props_path" ]; then
        # check if java-server is embedded/external
        java_server=$(get_property_value "$props_path" "java_server")
        # check if java-server is embedded
        if [ "$java_server" = "embedded" ]; then
            # Get the embedded port for server
            server_port=$(get_property_value "$props_path" "server.port")
            logn "  starting $app_name on port $server_port... "
            check_port_available "$server_port"
            if [ $? -ne 0 ]; then
                nohup java -jar "$war_path/$war_file_name" >> "$app_name.log" 2>&1 &
                check_process "$app_name"
            else
                echo "failed, port $server_port is occupied."
            fi
        fi
    elif [ "$ENABLE_JAVA" != "OFF" ]; then
        log "Warning - cannot start embedded $app_name, $props_path not found."
    fi
}


# --- ACTION ------------------------------------------------------

usage()
{
    cat <<EOF
Start the rasdaman server if not already running.

Usage:
  start_rasdaman.sh [OPTION]...

Options:
  --service <svc>       start a particular service <svc> only; allowed values 
                        for <svc> are: core, petascope, secore. By default all
                        services are started.

  -p, --port <port>     specify the port on which rasmgr will listen. By default
                        this is 7001, it is recommended to avoid changing this
                        value unless really necessary.

  <N1> <N2> ...         start only the specified rasservers, as named in 
                        etc/rasmgr.conf. By default all configured rasservers 
                        are started.

  -h, --help            show this message and exit.
EOF
    exit $RC_HELP
}

set_all_options()
{
    start_rasmgr_rasservers=$1
    start_embedded_petascope=$1
    start_embedded_secore=$1
    start_all_services=$1
}

set_all_options true

servers=""
# Iterate all input arguments (it can contain server names (N1 N2 ...) and some options (--service petascope ...)
option=""
for i in "$@"; do
    if [ -n "$option" ]; then
        # Get option value for --service
        if [ "$option" = "--service" ]; then
            set_all_options false
            case "$i" in
              core)      start_rasmgr_rasservers=true;;
              petascope) start_embedded_petascope=true;;
              secore)    start_embedded_secore=true;;
              *)         error "Value for option $option must be core|petascope|secore. Given: $i";;
            esac
        elif [ "$option" = "--port" -o "$option" = "-p" ]; then
            set_rasmgr_port "$i"
        fi
        option=""
    else
        option=""
        case $i in
          --service)      option="$i";;
          --port|-p)      option="$i";;
          --help|-h)      usage;;
          -*)             error "unknown option: $i";;
          *)              servers="$servers $i";;
        esac
    fi
done

# --- start rasmgr: -------------------------------------------------

# check if rasmgr exists
[ -f "$rasmgr_bin" ] || \
    error "$rasmgr_bin not found, rasdaman cannot be started."

# here we want to put all log files
cd "$log_path"

# check if we can actually write anything here
[ -w . ] || \
    error "User $USER has no write permissions in $log_path, rasdaman cannot be started."

if [ "$start_rasmgr_rasservers" = true ]; then

    # check if rasmgr is already running first of all
    ps -Ao pid,args | grep "[^]]$rasmgr_bin --port $RASMGR_PORT" > /dev/null 2>&1 && \
      { log "rasdaman is currently running, nothing to do."; exit $RC_OK; }

    # clear previous log file
    rm -f nohup.out

    log "starting rasdaman server complex..."

    # start rasdaman server manager as demon; log will go into nohup.out
    # the manager is started in quiet mode
    logn "  starting rasmgr... "
    nohup "$rasmgr_bin" --port $RASMGR_PORT > nohup.out 2>&1 &
    check_process "rasmgr" 1

    # --- start servers: -------------------------------------------------
    # if no input servers provided, check if environmental variable $RASSERVERS exists
    if [ -z "servers" ]; then
        servers="$RASSERVERS"
    fi

    # ...then spawn server workers
    if [ -n "$servers" ]; then
        for SRV in $servers; do
            logn "  starting server $SRV... "
            "$rascontrol_bin" --port $RASMGR_PORT -e -q -x up srv $SRV || exit $!
            check
        done
    else
        logn "  starting all rasdaman servers... "
        "$rascontrol_bin" --port $RASMGR_PORT -e -q -x up srv -all || exit $!
        check
    fi

fi

# start embedded petascope and secore if needed
if [ "$start_embedded_secore" = true ]; then
    start_embedded "$secore_props" "secore" "def.war"
fi

if [ "$start_embedded_petascope" = true ]; then
    start_embedded "$petascope_props" "petascope" "rasdaman.war"
fi

log "done."

exit $RC_OK

# --- END ACTION ----------------------------------------------------
