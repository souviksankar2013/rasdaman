/*
* This file is part of rasdaman community.
*
* Rasdaman community is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Rasdaman community is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
*
* Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009 Peter Baumann /
rasdaman GmbH.
*
* For more information please see <http://www.rasdaman.org>
* or contact Peter Baumann via <baumann@rasdaman.com>.
*/
/** ***********************************************************
 * <pre>
 *
 * PURPOSE:
 * first part of three constituting RasErrorTexts.java:
 * - part 1: Java src
 * - part 2: generated from errtxts file
 * - part 3: Java src
 *
 *
 * COMMENTS:
 *
 * </pre>
 *********************************************************** */

package rasj.global;

import java.io.*;

// This file is created automatically - do not edit unless allowed explicitly (look for
// a message "changes can only be made after here")!

public abstract class RasErrorTexts {

    // NOTE: The content of this array comes from errtxts file (http://rasdaman.org/browser/bin/errtxts) via a bash script
    public static String[] errorMessages = { $ARRAY_OF_ERROR_MESSAGES_FROM_ERRTXTS_FILE };

    public static String getErrorMessage(int errNo) {
        return getErrorMessage(errNo, null);
    }

    public static String getErrorMessage(int errNo, String token) {
        StringBuffer buf;
        String prefix = String.valueOf(errNo) + ":";
        int index = 0;
        String retVal = null;

        while (index < errorMessages.length - 1) { // last string is empty, see above
            if (errorMessages[index].startsWith(prefix)) {
                buf = new StringBuffer(errorMessages[index]);
                index = errorMessages[index].indexOf(":");
                buf.delete(0, index + 1);
                retVal = buf.toString();
                index = errorMessages.length + 1;
            } else {
                index++;
            }
        }
        if (retVal == null) {
            if (token == null) {
                retVal = "No error message available for error number " + errNo + ".";
            } else if (token.startsWith("Exception: ")) {
                retVal = token.substring("Exception: ".length());
            } else {
                retVal = token;
            }
        }

        return retVal;
    }

}


